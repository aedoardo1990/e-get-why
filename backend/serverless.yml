org: lokytech
app: egetwhy-app
service: backend

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  environment:
    USERS_TABLE: ${env:USERS_TABLE}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    COGNITO_CLIENT_SECRET: ${env:COGNITO_CLIENT_SECRET}
    STAGE: ${self:provider.stage}
    SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}
    S3_BUCKET_NAME: ${self:custom.bucketName}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:InitiateAuth
            - cognito-idp:SignUp
            - cognito-idp:AdminUserGlobalSignOut
            - cognito-idp:AdminGetUser
          Resource: 
            - arn:aws:cognito-idp:us-east-1:058264434140:userpool/us-east-1_xtNgH0g6z
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:us-east-1:058264434140:function:sendWelcomeEmail-${self:provider.stage}
        - Effect: Allow
          Action: 
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:custom.bucketName} 
            - arn:aws:s3:::${self:custom.bucketName}/*
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]

layers:
  myLambdaLayer:
    path: lambda_layer
    name: ${self:provider.stage}-myLambdaLayer
    compatibleRuntimes:
      - nodejs20.x

functions:
  getUserById:
    handler: src/users/handler.handler
    layers:
      - arn:aws:lambda:us-east-1:058264434140:layer:myLambdaLayer:1
    events:
      - http:
          path: users/{userId}
          method: get

  createUser:
    handler: src/users/handler.handler
    layers:
      - arn:aws:lambda:us-east-1:058264434140:layer:myLambdaLayer:1
    events:
      - http:
          path: users
          method: post

  verifyUser:
    handler: src/users/handler.handler
    layers:
      - arn:aws:lambda:us-east-1:058264434140:layer:myLambdaLayer:1
    events:
      - http:
          path: users/verify
          method: post

  loginUser:
    handler: src/users/handler.handler
    layers:
      - arn:aws:lambda:us-east-1:058264434140:layer:myLambdaLayer:1
    events:
      - http:
          path: login
          method: post

  sendWelcomeEmail:
    handler: src/users/sendWelcomeEmail.handler
    name: sendWelcomeEmail-${self:provider.stage}
    layers:
      - arn:aws:lambda:us-east-1:058264434140:layer:myLambdaLayer:1
    events: []

  uploadProfilePicture:
    handler: src/users/handler.handler
    layers:
      - arn:aws:lambda:us-east-1:058264434140:layer:myLambdaLayer:1
    events:
      - http:
          path: users/upload-profile-picture
          method: post

  s3EventHandler:
    handler: src/events/s3EventHandler.handler
    layers:
      - arn:aws:lambda:us-east-1:058264434140:layer:myLambdaLayer:1
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*

  dynamoEventHandler:
    handler: src/events/dynamoEventHandler.handler
    layers:
      - arn:aws:lambda:us-east-1:058264434140:layer:myLambdaLayer:1
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - UsersTable
              - StreamArn

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${env:USERS_TABLE}
    S3BucketMyBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: egetwhy-bucket

custom:
  tableName: "users-table-${self:provider.stage}"
  bucketName: ${self:custom.bucketNames.${self:provider.stage}}
  bucketNames:
    dev: e-getwhy-bucket-dev
    production: e-getwhy-bucket-prod

  serverless-offline-watcher:
    - path: src/users/handler.ts
      command: npm run start

  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude: []
    external:
      - "express"
      - "multer"
      - "aws-jwt-verify"
      - "@sendgrid/mail"
      - "@aws-sdk/lib-dynamodb"
    target: "node20"
    define:
      "require.resolve": undefined
    platform: "node"

package:
  exclude:
    - node_modules/**
    - dist/**
    - .serverless/**
    - .git/**
    - README.md

plugins:
  - serverless-dotenv-plugin
